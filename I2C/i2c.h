
#ifndef I2C_H_
#define I2C_H_




#include "micro_config.h"
#include "std_types.h"
#include "macros.h"



/*Status Codes*/

#define TWI_MASTER_START_CONDITION_SENT  					0X08
#define TWI_MASTER_REPEATED_START_CONDITION_SENT				0X10
#define TWI_MASTER_SLAVE_ADD_WITH_WRITE_SENT_ACK_RECEIVED			0X18
#define TWI_MASTER_SLAVE_ADD_WITH_WRITE_SENT_NO_ACK_RECEIVED			0X20
#define TWI_MASTER_SLAVE_ADD_WITH_READ_SENT_ACK_RECEIVED			0X40
#define TWI_MASTER_SLAVE_ADD_WITH_READ_SENT_NO_ACK_RECEIVED			0X48
#define TWI_MASTER_DATA_BYTE_TRANSMITTED_WITH_ACK_RECEIVED			0X28
#define TWI_MASTER_DATA_BYTE_TRANSMITTED_WITH_NO_ACK_RECEIVED			0X30
#define TWI_MASTER_DATA_BYTE_RECEIVED_WITH_ACK_TRANSMITTED			0X50
#define TWI_MASTER_DATA_BYTE_RECEIVED_WITH_NO_ACK_TRANSMITTED			0X58

#define TWI_SLAVE_REPEATED_START_CONDITION_RECEIVED				0XA0
#define TWI_SLAVE_SLAVE_ADD_WITH_WRITE_RECEIVED_ACK_SENT			0X60
#define TWI_SLAVE_SLAVE_ADD_WITH_READ_RECEIVED_ACK_SENT				0xA8
#define TWI_SLAVE_DATA_BYTE_RECEIVED_WITH_ACK_TRANSMITTED			0X80
#define TWI_SLAVE_DATA_BYTE_RECEIVED_WITH_NO_ACK_TRANSMITTED			0X88
#define TWI_SLAVE_DATA_BYTE_TRANSMITTED_WITH_ACK_RECEIVED			0XB8
#define TWI_SLAVE_DATA_BYTE_TRANSMITTED_WITH_NO_ACK_RECEIVED			0XC0

/****/

typedef enum
{
	_INTERRUPT_FLAG_TWI,
	_WRITE_COLLISION_FLAG_TWI

}TWI_FLAG;


typedef enum
{
	_DISABLE_INTERRUPT,
	_ENABLE_INTERRUPT

}TWI_INTERRUPT;

typedef enum
{
	_ACK_DISABLE,
	_ACK_ENABLE

}TWI_ACKNOWLEDGMENT;


typedef struct twi_configstruct
{
	TWI_INTERRUPT	   	   TWI_INT;
	uint8_t 		   TWI_addresse;
	uint32_t 		   CPU_Frequency;
	uint32_t		   SCL_Frequency;
}TWI_ConfigStruct;



bool TWI_init(const TWI_ConfigStruct*);

void TWI_start();

void TWI_stop();

void TWI_send(uint8_t);

uint8_t TWI_read(const 	TWI_ACKNOWLEDGMENT);

uint8_t TWI_getFlag(const TWI_FLAG);

uint8_t TWI_getStatus();

bool TWI_setInterruptCallBacks(void(*)(void),void(*)(void));

bool TWI_interruptDisable();

bool TWI_disable();





#endif
